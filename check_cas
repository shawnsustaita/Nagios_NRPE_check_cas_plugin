#!/usr/bin/env perl

### License
# The MIT License (MIT)
# 
# Copyright (c) 2015 Shawn Sustaita
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

### Includes
use strict;
use warnings;
use Getopt::Long;
use WWW::Mechanize;  # Web bot
use version; our $VERSION = qv('0.9.0');

### Globals
my $mech;
my $response;
my $login;
my $username;
my $password;
my $regex;
my $help;
my $debug;
my %errors=(OK       => 0,
            WARNING  => 1,
            CRITICAL => 2,
            UNKNOWN  => 3,);

### Prototypes
sub main;
sub login;
sub usage;

### Main
main();

### Subroutines
sub main {
    # Grab required options.
    my $ret = GetOptions('help'       => \$help,
                         'debug'      => \$debug,
                         'regex=s'    => \$regex,
                         'login=s'    => \$login,
                         'username=s' => \$username,
                         'password=s' => \$password,);

    # Verify required options.
    usage() if !$ret;
    usage() if  $help;
    usage() if !$regex;
    usage() if !$login;
    usage() if !$username;
    usage() if !$password;

    # Attempt a login.
    login();
    
    # If login successful, report success.
    if ($mech->content() =~ /$regex/i) {
        print "Authentication OK\n";
        print $mech->content() if $debug;
        exit $errors{OK};
    }

    # Login attempt failed.  Exit failure.
    print "Authentication failure\n";
    print $mech->content() if $debug;
    exit $errors{WARNING};
}

sub login {
    # Instantiate a bot and request login page.
    # Bot will cache cookies and jsessionid in memory.
    $mech = WWW::Mechanize->new(quiet     =>  1,
                                autocheck =>  0,
                                timeout   => 30,);
    $mech->get($login);
    if (!$mech->success) {
        print "Get failed\n";
        exit $errors{CRITICAL};
    }
    
    # Fillout form with credentials and submit.
    # The form and form fields may vary based on CAS implementation.
    # Modify accordingly.
    if (!$mech->form_with_fields('username', 'password')) {
        print "Form failed\n";
        exit $errors{UNKNOWN};
    }
    $mech->field('username', $username);
    $mech->field('password', $password);
    $mech->submit_form();
    if (!$mech->success) {
        print "Post failed\n";
        exit $errors{CRITICAL};
    }
}

sub usage {
    # This is how we do it (Montell Jordan hip hop lyric)!  ;)
    print "usage: $0 <options>\n\n",
          "required options:\n",
          "    --login    <login url>\n",
          "    --username <username>\n",
          "    --password <password>\n",
          "    --regex    <success regex>\n\n",
          "options:\n",
          "    --help\n",
          "    --debug\n\n",
          "examples:\n",
          "    check_cas --help\n",
          "    check_cas --login https://example.com/cas/login     --username neo --password TheOne\n",
          "    check_cas --login https://\$HOSTADDRESS\$/cas/login   --username neo --password TheOne\n",
          "    check_cas --login https://example.com/cas/login     --username neo --password TheOne --debug\n";

    exit $errors{UNKNOWN};
}
