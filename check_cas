#!/usr/bin/env perl

### Includes
use strict;
use warnings;
use Getopt::Long;
use WWW::Mechanize;  # Web bot

### Globals
my $mech;
my $response;
my $login;
my $logout;
my $username;
my $password;
my $help;
my %errors=(OK       => 0,
            WARNING  => 1,
            CRITICAL => 2,
            UNKNOWN  => 3,);

### Prototypes
sub main;
sub login;
sub logout;
sub usage;

### Main
main();

### Subroutines
sub main {
    # Grab required options.
    my $ret = GetOptions('help'       => \$help,
                         'login=s'    => \$login,
                         'logout=s'   => \$logout,
                         'username=s' => \$username,
                         'password=s' => \$password,);

    # Verify required options.
    usage() if !$ret;
    usage() if  $help;
    usage() if !$login;
    usage() if !$logout;
    usage() if !$username;
    usage() if !$password;

    # Attempt a login.
    login();
    
    # If login successful, logout and exit success.
    if ($mech->content() =~ /Log In Successful/i) {
        print "Authentication OK\n";
        logout();  # logout does not error check.
        exit $errors{OK};
    }

    # Login attempt failed.  Exit failure.
    print "Authentication failure\n";
    exit $errors{WARNING};
}

sub login {
    # Instantiate a bot and request login page.
    # Bot will cache cookies and jsessionid in memory.
    $mech = WWW::Mechanize->new(quiet     =>  1,
                                autocheck =>  0,
                                timeout   => 30,);
    $mech->get($login);
    if (!$mech->success) {
        print "Fetch login page failed\n";
        exit $errors{CRITICAL};
    }
    
    # Fillout form with credentials and submit.
    # The form and form fields may vary based on CAS implementation.
    # Modify accordingly.
    $mech->form_id('fm1');
    $mech->field('username', $username);
    $mech->field('password', $password);
    $mech->submit_form();
    if (!$mech->success) {
        print "Submit form failed\n";
        exit $errors{CRITICAL};
    }
}

sub logout {
    # Attempt a logout without error checking.
    $mech->get($logout);
}

sub usage {
    # This is how we do it (Montell Jordan hip hop lyric)!  ;)
    print "usage: $0 <required options>\n\n",
          "required options:\n",
          "    --login    <login url>\n",
          "    --logout   <login url>\n",
          "    --username <username>\n",
          "    --password <password>\n\n",
          "examples:\n",
          "    check_cas --login https://example.com/cas/login --logout https://example.com/cas/logout --username neo --password TheOne\n",
          "    check_cas --login https://\$HOSTADDRESS\$/cas/login --logout https://\$HOSTADDRESS\$/cas/logout --username neo --password TheOne\n";

    exit $errors{UNKNOWN};
}
